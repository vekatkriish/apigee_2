pipeline {
    agent any
    environment { 
        giturl = 'https://github.com/vekatkriish/apigee_2.git'
        gitCid = '46d318e0-7de7-49ab-86ae-1669225823c1'
    }
    
    stages {
        stage('checkout_script') {
            steps {
                git changelog: false, credentialsId: env.gitCid, poll: false, url: env.giturl
            }
        }
        stage('resolve_task') {
            steps {
                script{
                        if(env.branch2.equals("noMerge")){
                            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: env.gitCid, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
                                 String encoded_password = java.net.URLEncoder.encode(env.GIT_PASSWORD, "UTF-8")
                                 gitrepo = (env.giturl).split('//')[1].trim()
                                 dir ('RallyBuild') {
                                    isBranchExists = sh(script: 'git ls-remote --heads ${giturl} ${branch1} | wc -l', returnStdout: true).trim()
                                    if(isBranchExists.equals('1')){
                                        error 'branch '+ env.branch1 +'already exixts'
                                    }else{
                                        sh 'chmod +x checkLocalBranch.sh'
                                        isLocalBranchExists = sh(script: './checkLocalBranch.sh ${branch1}', returnStdout: true)
                                        echo isLocalBranchExists+'   ****'
                                        echo 'creating new branch ....'
                                        sh 'git branch ${branch1}'
                                        sh 'chmod +x gitcommit.sh'
                                        ret = sh(script: './gitcommit.sh '+ env.GIT_USERNAME +' '+encoded_password+' '+gitrepo+' '+ env.branch1, returnStdout: true).trim()
                                        echo 'Git Branch Commit & Push Status: '+ret
                                        if(ret == 'OK'){
                                            echo 'git branch ' + env.branch1 + ' created'
                                        }else{
                                            error 'git unable to commit'
                                        }
                                    }
                                }
                            }
                        }else if(!env.branch2.equals("NA") && !env.branch2.equals("")){
                            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: env.gitCid, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
                                 String encoded_password = java.net.URLEncoder.encode(env.GIT_PASSWORD, "UTF-8")
                                 gitrepo = (env.giturl).split('//')[1].trim()
                                 sourceBranch = 'origin/'+env.branch1
                                 dir ('RallyBuild') {
                                    sh 'chmod +x checkAndMerge.sh'
                                    isMergeBranchExists = sh(script: './checkAndMerge.sh ${giturl} ${branch1} ${branch2}'+' ' + env.GIT_USERNAME + ' ' + encoded_password + ' ' + gitrepo + ' ' + env.branch2, returnStdout: true).trim()
                                    echo isMergeBranchExists + " inside check  "+isMergeBranchExists.length()
                                    /*if(isMergeBranchExists == "OK"){
                                        sh 'git checkout ${branch2}'
                                        sh 'git merge '+sourceBranch + ' -m "feature branch ${branch1} merged"'*/
                                        sh 'chmod +x gitcommit.sh'
                                        ret = sh(script: './gitcommit.sh '+ env.GIT_USERNAME +' '+encoded_password+' '+gitrepo+' '+ env.branch2, returnStdout: true).trim()
                                        echo 'Git Branch Commit & Push Status: '+ret
                                        if(ret == 'OK'){
                                            echo 'git branch ' + env.branch1 + ' created'
                                        }else{
                                            error 'git unable to commit'
                                        }
                                    }else{
                                        error 'branch '+ env.branch1 +' doesnt exixts for merging in repository'
                                    }*/
                                }
                            }
                        }
                }
            }
        }
    }
    post {
        success {
            script{
                dir ('RallyBuild') {
                    sh 'python updateTask.py ${fmtId} ${notes} ${BUILD_URL}'
                }
            script{
                mail (to: env.notes.split(';')[0].trim(),
                     subject: 'Job '+env.JOB_NAME+' '+env.BUILD_NUMBER+' is sucesses',
                    body: "please visit {$BUILD_URL} for more details.");
            }
            }
        }
        failure {
            echo 'failed build'
        }
    }
}
